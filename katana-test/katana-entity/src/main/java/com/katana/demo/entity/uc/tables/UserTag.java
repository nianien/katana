/*
 * This file is generated by jOOQ.
 */
package com.katana.demo.entity.uc.tables;


import com.katana.demo.entity.uc.Keys;
import com.katana.demo.entity.uc.Uc;
import com.katana.demo.entity.uc.tables.records.UserTagRecord;
import com.katana.jooq.converter.LocalDateTimeConverter;

import java.util.Date;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserTag extends TableImpl<UserTagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>uc.user_tag</code>
     */
    public static final UserTag USER_TAG = new UserTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserTagRecord> getRecordType() {
        return UserTagRecord.class;
    }

    /**
     * The column <code>uc.user_tag.id</code>. 主键
     */
    public final TableField<UserTagRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>uc.user_tag.userid</code>. 用户id
     */
    public final TableField<UserTagRecord, Long> USERID = createField(DSL.name("userid"), SQLDataType.BIGINT.nullable(false), this, "用户id");

    /**
     * The column <code>uc.user_tag.tag</code>. 账户标签
     */
    public final TableField<UserTagRecord, String> TAG = createField(DSL.name("tag"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.field(DSL.raw("'0'"), SQLDataType.VARCHAR)), this, "账户标签");

    /**
     * The column <code>uc.user_tag.create_time</code>. 创建时间
     */
    public final TableField<UserTagRecord, Date> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("'2010-01-01 00:00:00'"), SQLDataType.LOCALDATETIME)), this, "创建时间", new LocalDateTimeConverter());

    /**
     * The column <code>uc.user_tag.modify_time</code>. 修改时间
     */
    public final TableField<UserTagRecord, Date> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "修改时间", new LocalDateTimeConverter());

    /**
     * The column <code>uc.user_tag.env</code>. 环境标
     */
    public final TableField<UserTagRecord, String> ENV = createField(DSL.name("env"), SQLDataType.VARCHAR(8).nullable(false).defaultValue(DSL.field(DSL.raw("''"), SQLDataType.VARCHAR)), this, "环境标");

    private UserTag(Name alias, Table<UserTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserTag(Name alias, Table<UserTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>uc.user_tag</code> table reference
     */
    public UserTag(String alias) {
        this(DSL.name(alias), USER_TAG);
    }

    /**
     * Create an aliased <code>uc.user_tag</code> table reference
     */
    public UserTag(Name alias) {
        this(alias, USER_TAG);
    }

    /**
     * Create a <code>uc.user_tag</code> table reference
     */
    public UserTag() {
        this(DSL.name("user_tag"), null);
    }

    public <O extends Record> UserTag(Table<O> child, ForeignKey<O, UserTagRecord> key) {
        super(child, key, USER_TAG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Uc.UC;
    }

    @Override
    public Identity<UserTagRecord, Long> getIdentity() {
        return (Identity<UserTagRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserTagRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_F;
    }

    @Override
    public UserTag as(String alias) {
        return new UserTag(DSL.name(alias), this);
    }

    @Override
    public UserTag as(Name alias) {
        return new UserTag(alias, this);
    }

    @Override
    public UserTag as(Table<?> alias) {
        return new UserTag(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserTag rename(String name) {
        return new UserTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserTag rename(Name name) {
        return new UserTag(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserTag rename(Table<?> name) {
        return new UserTag(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, String, Date, Date, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Long, ? super String, ? super Date, ? super Date, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Long, ? super String, ? super Date, ? super Date, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
